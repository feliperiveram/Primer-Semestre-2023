# SIEMPRE INCLUIR import numpy as np AL COMIENZO
import numpy as np

# GENERALIDADES
# - LAS POSICIONES VAN DE 0 A (len(nombre_arreglo)-1)
# - LA POSICIÓN nombre_arreglo[-1] ES EL ÚLTIMO ELEMENTO DEL ARREGLO

# ARREGLOS UNIDIMENSIONALES

# 1) CREAR UNA MATRIZ DE CIERTA CANTIDAD DE ELEMENTOS ALEATORIOS
# NO REQUIERE IMPORTAR LA FUNCIÓN random AL COMIENZO
# nombre_arreglo = np.random.randint(ELEMENTO INICIAL , ELEMENTO MÁXIMO (SIN INCLUIR) , size=(CANTIDAD DE ELEMENTOS DEL ARREGLO))

arreglo = np.random.randint(1,101,size=(10))
# EL ARREGLO 'arreglo' ES UNA MATRIZ UNIDIMENSIONAL DE 10 ELEMENTOS, LOS CUALES SON ALEATORIOS Y PUEDEN TOMAR VALORES DEL 1 AL 101
# (INCLUYENDO AL 1 PERO EXCLUYENDO AL 101, ES DECIR TOMA LOS VALORES ENTRE 1 Y 100)

# 2) CREAR UNA MATRIZ DE CANTIDAD VARIABLE DE ELEMENTOS SEGÚN PARÁMETROS ESTABLECIDOS
# nombre_arreglo = np.arange(VALOR INICIAL , VALOR MÁXIMO (SIN INCLUIR) , STEP)
# LARGO DE ARREGLO DEPENDE DE LOS PARÁMETROS INGRESADOS

arreglo = np.arange(1,102,10)
# GENERA EL SIGUIENTE ARREGLO: [  1  11  21  31  41  51  61  71  81  91 101  ] (11 ELEMENTOS)

arreglo = np.arange(1,101,10)
# GENERA EL SIGUIENTE ARREGLO: [  1  11  21  31  41  51  61  71  81  91  ] (10 ELEMENTOS)

nombre_arreglo = np.arange(4)
# GENERA EL SIGUIENTE ARREGLO: [  0  1  2  3  ] (4 ELEMENTOS QUE VAN DESDE EL 0 AL 3)

nombre_arreglo = np.arange(4.)
# GENERA EL SIGUIENTE ARREGLO: [  0.  1.  2.  3.  ] (4 ELEMENTOS DECIMALES QUE VAN DESDE EL 0. AL 3.)

# 3) OPERACIONES BÁSICAS

# 3.1 SUMA DE ELEMENTOS DEL ARREGLO
# nombre_arreglo.sum()
print (f"La suma de los elementos del arreglo es {arreglo.sum()}.")

# 3.2 PROMEDIO
# nombre_arreglo.mean()

# 3.3 SUMAR TODOS LOS ELEMENTOS DE UN ARREGLO POR ALGUNA CONSTANTE
# nombre_arreglo += n
arreglo += 5
# DEVUELVE EL ARREGLO CON TODOS SUS ELEMENTOS ORIGINALES AUMENTADOS EN 5

# 3.4 USO DE POTENCIAS
# nombre_arreglo **= n
arreglo **= 2
# DEVUELVE EL ARREGLO CON TODOS LOS CUADRADOS DE SUS ELEMENTOS ORIGINALES

# 3.5 OPERACIONES ENTRE ARREGLOS

# 3.5.1
# ARREGLOS SE PUEDEN OPERAR ENTRE SÍ (SUMA ELEMENTO A ELEMENTOS, DIVISIÓN ELEMENTO A ELEMENTO, ETC.)
# arreglo_resultante = nombre_arreglo_1 (+,-,/,*) nombre_arreglo_2

# 3.5.2
# ARREGLOS SE PUEDEN COMPARAR ENTRE SÍ -> DEVUELVE ARREGLO BOOLEANO
# arreglo_comparacion = nombre_arreglo_1 (==,>,<,etc.) nombre_arreglo_2

# 3.6 ENCONTRAR EL VALOR MÁXIMO O MÍNIMO DE UN ARREGLO
# nombre_arreglo.max() Y nombre_arreglo.min()

# 4) CREACIÓN DE UN ARREGLO

# 4.1 A PARTIR DE UNA LISTA YA CREADA
# SI EXISTE nombre_lista = [1,2,3,...,n]
# SE PUEDE USAR nombre_arreglo = np.array(nombre_lista)

# 4.2 DIRECTAMENTE CON FUNCIÓN DE NUMPY
# nombre_arreglo = np.array([1,2,3,...,n])

# 4.3 CON FUNCIÓN i for i in range(n) PARA CREAR UNA LISTA (Y LUEGO CREAR EL ARREGLO DE TAL LISTA)
# nombre_lista = [i for i in range(DESDE DONDE , HASTA DONDE (SIN INCLUIR)) , STEP OPCIONAL]

lista = [i for i in range(1,11)]
# DEVUELVE UNA LISTA CON 10 ELEMENTOS ([1, 2, 3, 4, 5, 6, 7, 8, 9 ,10])

# 5) MOSTRAR DIMENSIONES DE UN ARREGLO (SIRVE PARA UNI Y BIDIMENSIONALES)
# print(nombre_arreglo.ndim)
# DEVUELVE EL NÚMERO DE DIMENSIONES

# 6) MOSTRAR LARGO DE UN ARREGLO
# print(len(nombre_arreglo))

# 7) SLICE
# nombre_arreglo[DESDE DONDE : HASTA DONDE (SIN INCLUIR) : STEP OPCIONAL]; LOS PARÁMETROS SON EN BASE A LAS POSICIONES DE LOS ELEMENTOS
# LAS POSICIONES VAN DE 0 A (len(nombre_arreglo)-1)

# 8) COPIAR ARREGLOS

# 8.1 COPIAR Y MODIFICAR AMBOS ARREGLOS (DOS ARREGLOS "UNIFICADOS") -> CAMBIOS EN UN ARREGLO SE REFLEJAN TAMBIÉN EN EL OTRO
# arreglo_copia = nombre_arreglo[:]

# 8.2 COPIAR Y CREAR 2 ARREGLOS INDEPENDIENTES ENTRE SÍ
# arreglo_copia = nombre_arreglo[].copy()

# ARREGLOS BIDIMENSIONALES

# 1) CREACIÓN DE UN ARREGLO

# 1.1 TRADICIONAL
nombre_arreglo = np.array( [ [0,1,2] , [3,4,5] ] )

# 1.2 USANDO LISTAS
# nombre_lista = [ [0,1,2] , [3,4,5] ]
# nombre_arreglo = np.array(nombre_lista)

# 2) MOSTRAR ELEMENTO DE MATRIZ
# nombre_arreglo[NÚMERO DE POSICIÓN EN EJE VERTICAL][NÚMERO DE POSICIÓN EN EJE HORIZONTAL]

# 3) MOSTRAR TODOS LOS ELEMENTOS DE LA MATRIZ

nombre_arreglo = np.array( [ [0,1,2] , [3,4,5] ] )
# MATRIZ DE 3X2, POR LO QUE EN EL EJE VERTICAL TIENE 2 ELEMENTOS Y EN EL HORIZONTAL 3
for n in range(2):
# EN EL PRIMER for VA EL EJE VERTICAL
    for m in range(3):
    # EN EL SEGUNDO for VA EL EJE HORIZONTAL
        print(nombre_arreglo[n][m])
        
# 4) SLICE
# nombre_arreglo[ PARTE VERTICAL A MOSTRAR , PARTE HORIZONTALA MOSTRAR ]
# EN PARÁMETROS VAN LAS POSICIONES (MENOS STEP)
# nombre_arreglo[ DESDE DONDE : HASTA DONDE (EXCLUYÉNDOLO) : STEP OPCIONAL , DESDE DONDE : HASTA DONDE (EXCLUYÉNDOLO) : STEP OPCIONAL ]